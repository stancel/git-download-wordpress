---
# tasks file for git-download-wordpress


##  Handle any dependencies

- name: "Install Git and other needed packages"
  package: name={{ item }}  
  with_items: 
  - git
  - php7.2
  - php7.2-mbstring
  - php7.2-mysql
  - libapache2-mod-php7.2
  - libsodium23
  - php-libsodium
  - libsodium-dev
  - php7.2-curl
  - php7.2-json
  - php7.2-sqlite3
  - php7.2-zip
  - php7.2-xml
  - php-imap
  - php7.2-cli
  - php7.2-fpm
  - php7.2-bcmath
  - php7.2-intl
  - php7.2-odbc
  - php7.2-soap
  - php7.2-gd
  notify: 
  - restart-apache
  when: git_download_wordpress_manage_packages

- name: 'Upgrade APT to the latest packages'
  action: apt upgrade=safe
  when: git_download_wordpress_manage_packages

- name: "Create and set a swap file if one is not set"
  block:

    - name: Create swap directory
      command: mkdir -p /extraswap

    - name: Create swap space
      command: dd if=/dev/zero of=swapfile bs=1M count=2000
      args:
        chdir: /extraswap

    - name: Create swap space
      command: mkswap swapfile
      args:
        chdir: /extraswap

    - name: Turn swap on
      command: swapon swapfile
      args:
        chdir: /extraswap

    - name: Set swap file permission
      command: chmod 600 swapfile
      args:
        chdir: /extraswap

    - name: Add to fstab
      action: lineinfile dest=/etc/fstab regexp="swapfile" line="/extraswap/swapfile none swap sw 0 0" state=present

    - name: Set swapiness
      sysctl:
        name: vm.swappiness
        value: "1" 

  # Only execute if the swap is not already setup
  when: ansible_swaptotal_mb < 1

- name: "Check if Composer is already installed. Don't bother installing if so"
  shell: command -v composer >/dev/null 2>&1
  register: is_composer_installed
  ignore_errors: yes

- name: "Install Composer program"
  script: ../files/install_composer.sh
  args: 
    creates: /usr/local/bin/composer
  when: (git_download_wordpress_install_composer and is_composer_installed.rc == 0) 
        or (git_download_wordpress_install_composer and is_composer_installed.failed == true) 

##  End - Handle any dependencies


##  Set needed PHP configuration

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: MySQLi
    option: mysqli.allow_local_infile
    value: 0
  when: git_download_wordpress_configure_mysqli_allow_local_infile

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: memory_limit
    value: 756M
  when: git_download_wordpress_configure_memory_limit

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: post_max_size
    value: 64M
  when: git_download_wordpress_configure_post_max_size

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: upload_max_filesize
    value: 64M
  when: git_download_wordpress_configure_upload_max_filesize

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: max_input_time
    value: 60
  when: git_download_wordpress_configure_max_input_time

- name: "Changing PHP ini file options"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: max_execution_time
    value: 300
  when: git_download_wordpress_configure_max_execution_time

##  End - Set needed PHP configuration


##  Set Timezone on Server (if required)

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: "Set timezone in PHP ini file"
  ini_file: 
    path: /etc/php/7.2/apache2/php.ini
    section: PHP
    option: date.timezone
    value: UTC
  when: git_download_wordpress_configure_php_timezone

# The timezone for PHP and for the OS need to be set to UTC for sync integrations to work properly
- name: 'Set Timezone to UTC'
  timezone:
    name: Etc/UTC

##  End Set Timezone on Server (if required)


##  Prepping directory for web application / site

- name: "Debugging the web files path variable"
  debug: var=git_download_wordpress_web_files_path

- name: "Debugging the web files path variable"
  debug: var=git_download_wordpress_web_directory_for_application

- name: "Clearing out existing web/install directory"
  file: 
    state: absent 
    path: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"

- name: "Re-creating web/install directory"
  file:
    path: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"
    state: directory
    owner: "{{ git_download_wordpress_web_user }}"
    group: "{{ git_download_wordpress_web_group }}"
    mode: 0644
    recurse: yes

##  End - Prepping directory for web application / site


##  Deploy files from Git repo

- name: "Git clone the repo"
  command: git clone {{ git_download_wordpress_git_repo }} {{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}
  args: 
    chdir: "{{ git_download_wordpress_web_files_path }}"
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")

- name: "Debugging the git_download_wordpress_git_branch variable"
  debug: var=git_download_wordpress_git_branch

- name: "Debugging the git_download_wordpress_tagged_release_version variable"
  debug: var=git_download_wordpress_tagged_release_version

- name: "Checkout the desired release"
  command: git checkout {{ git_download_wordpress_tagged_release_version }}
  args: 
    chdir: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"
  when: (git_download_wordpress_tagged_release_version != "") and 
          (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")

- name: "Checkout the desired branch"
  command: git checkout {{ git_download_wordpress_git_branch }}
  args: 
    chdir: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"
  when: (git_download_wordpress_git_branch != "") and 
          (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")

##  End - Deploy files from Git repo


##  Create and/or handle any DB related tasks

- name: "Install Python MySQL bindings required for Ansible MySQL module"
  apt: 
    name: python-mysqldb 
    state: present

- name: "MYSQL | Create {{git_download_wordpress_db_name}} database"
  mysql_db:
    state: present
    name: "{{ git_download_wordpress_db_name }}"
    login_password: "{{ git_download_wordpress_mysql_root_password }}"
    encoding: "{{ git_download_wordpress_db_encoding }}"
    collation: "{{ git_download_wordpress_db_collation }}"

- name: "MYSQL | Create {{git_download_wordpress_db_name}} user"
  mysql_user:
    state: present
    name: "{{ git_download_wordpress_db_user }}"
    login_password: "{{ git_download_wordpress_mysql_root_password }}"
    password: "{{ git_download_wordpress_db_password }}"
    host: '%'
    priv: '{{ git_download_wordpress_db_name }}.*:TRIGGER,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE VIEW,ALTER ROUTINE,REFERENCES,EVENT,SHOW VIEW,EXECUTE,ALTER,DROP,CREATE,INDEX,SELECT,INSERT,UPDATE,DELETE'
    
##  End - Create and/or handle any DB related tasks


##  Handle any template files and schedulers/cron jobs

- name: populate service facts
  service_facts:

#- debug:
#    var: ansible_facts.services

- name: "Copying over wp-config.php to server"
  template:
    src: 'htaccess.j2'
    dest: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}/.htaccess"
    owner: "{{ git_download_wordpress_web_user }}"
    group: "{{ git_download_wordpress_web_group }}"
    mode: 0644
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade") 
          and ("'apache2' in services")

- name: "Fetch random salts for WordPress config"
  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
  register: "wp_salt"
  become: no
  become_method: sudo

- name: "Copying over wp-config.php to server"
  template:
    src: 'wp-config.php.j2'
    dest: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}/wp-config.php"
    owner: "{{ git_download_wordpress_web_user }}"
    group: "{{ git_download_wordpress_web_group }}"
    mode: 0644
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade") 

- name: "Copying over check_wordpress_updates.php script to server - used with Nagios to see if updates are needed"
  template:
    src: 'check_wordpress_updates.php.j2'
    dest: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}/check_wordpress_updates.php"
    owner: "{{ git_download_wordpress_web_user }}"
    group: "{{ git_download_wordpress_web_group }}"
    mode: 0644
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade") 

##  End - Handle any template files and schedulers/cron jobs


##  Trigger any application / site specific deployment tasks (if not handled elsewhere)

- name: "Install Composer packages"
  composer: 
    command: install
    working_dir: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade") 
          and (git_download_wordpress_use_bedrock == true)

##  End - Trigger any application / site specific deployment tasks


##  Set proper permissions for web application / site

- name: "Setting ownership and permissions for web directory - make sure all new files and directories inherit the group of the webserver"
  file:
    path: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}"
    state: directory
    owner: "{{ git_download_wordpress_web_user }}"
    group: "{{ git_download_wordpress_web_group }}"
    mode: g+s
    recurse: yes
#  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")

- name: "Ensure directories are 0755"
  command: find {{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }} -type d -exec chmod -c 0755 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Ensure files are 0644"
  command: find {{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }} -type f -exec chmod -c 0644 {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

# These next two tasks should be covered above but leaving them in right now for good measure
- name: "Set user and group ownership for all existing files and directories"
  command: chown -R {{ git_download_wordpress_web_user }}:{{ git_download_wordpress_web_group }} {{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Ensure newly created directories and files have a group of {{ git_download_wordpress_web_group }}"
  command: find {{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }} -type d -exec chmod g+s {} \;
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""

- name: "Removing Git folder from web server permissions"
  file:
    path: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}/.git"
    state: directory
    owner: root
    group: root
    mode: 0640
    recurse: yes
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")
  ignore_errors: true

- name: "Removing .gitignore from web server permissions"
  file:
    path: "{{ git_download_wordpress_web_files_path }}{{ git_download_wordpress_web_directory_for_application }}/.gitignore"
    state: file
    owner: root
    group: root
    mode: 0640
  when: (git_download_wordpress_installation_type == "new" or git_download_wordpress_installation_type == "upgrade")
  ignore_errors: true
  notify: restart-apache

##  End - Set proper permissions for web application / site



